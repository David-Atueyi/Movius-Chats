{"version":3,"file":"ChatContext.js","sources":["../../../src/context/ChatContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { ChatScreenProps } from '../types';\n\ninterface ChatContextType extends ChatScreenProps {\n  mediaUrl: { imageUrl: string; videoUrl: string };\n  setMediaUrl: (url: { imageUrl: string; videoUrl: string }) => void;\n  isVideoPlaying: boolean;\n  setIsVideoPlaying: (playing: boolean) => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport const ChatProvider: React.FC<\n  ChatScreenProps & { children: React.ReactNode }\n> = ({ children, ...props }) => {\n  const [mediaUrl, setMediaUrl] = useState({ imageUrl: '', videoUrl: '' });\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        ...props,\n        mediaUrl,\n        setMediaUrl,\n        isVideoPlaying,\n        setIsVideoPlaying,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChatContext = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChatContext must be used within a ChatProvider');\n  }\n  return context;\n};\n"],"names":["ChatContext","createContext","undefined","ChatProvider","children","props","mediaUrl","setMediaUrl","useState","imageUrl","videoUrl","isVideoPlaying","setIsVideoPlaying","_jsx","Provider","value","useChatContext","context","useContext","Error"],"mappings":"4GAUA,MAAMA,EAAcC,OAA2CC,GAElDC,EAETA,EAAGC,cAAaC,MAClB,MAAOC,EAAUC,GAAeC,EAAS,CAAEC,SAAU,GAAIC,SAAU,MAC5DC,EAAgBC,GAAqBJ,GAAS,GAErD,OACEK,EAACb,EAAYc,SAAQ,CACnBC,MAAO,IACFV,EACHC,WACAC,cACAI,iBACAC,qBACAR,SAEDA,GACoB,EAIdY,EAAiBA,KAC5B,MAAMC,EAAUC,EAAWlB,GAC3B,IAAKiB,EACH,MAAM,IAAIE,MAAM,qDAElB,OAAOF,CAAO"}