{"version":3,"file":"AudioPlayer.js","sources":["../../../../src/components/AudioPlayer/AudioPlayer.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { PanResponder, Pressable, Text, View } from 'react-native';\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\nimport Sound from 'react-native-sound';\nimport tw from 'twrnc';\nimport { PauseIcon } from '../../assets/Icons/PauseIcon';\nimport { PlayIcon } from '../../assets/Icons/PlayIcon';\nimport { useAudio } from '../../context/AudioContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { formatDuration } from '../../utils/datefunc';\nimport { AudioPlayerProps } from './types';\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({\n  audioUrl,\n  audioId,\n  isVideoPlaying,\n}) => {\n  const { theme, CustomPlayIcon, CustomPauseIcon } = useChatContext();\n  const { currentlyPlayingId, setCurrentlyPlayingId } = useAudio();\n  const [sound, setSound] = useState<Sound | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const progressRef = useRef<View>(null);\n  const progressWidth = useRef(0);\n  const progressX = useRef(0);\n  const startX = useRef(0);\n  const knobPosition = useSharedValue(0);\n\n  // Initialize sound\n  useEffect(() => {\n    let mounted = true;\n    const newSound = new Sound(audioUrl, '', (error) => {\n      if (!error && mounted) {\n        setDuration(newSound.getDuration());\n      }\n    });\n    setSound(newSound);\n\n    return () => {\n      mounted = false;\n      if (newSound) {\n        newSound.pause();\n        newSound.release();\n      }\n    };\n  }, [audioUrl]);\n\n  // Handle stopping playback when another audio starts\n  useEffect(() => {\n    if (\n      currentlyPlayingId &&\n      currentlyPlayingId !== audioId &&\n      isPlaying &&\n      sound\n    ) {\n      sound.pause();\n      setIsPlaying(false);\n      setCurrentTime(0);\n      knobPosition.value = 0;\n    }\n  }, [currentlyPlayingId, audioId, isPlaying, sound]);\n\n  // Update progress\n  useEffect(() => {\n    let interval: ReturnType<typeof setInterval>;\n    if (isPlaying && sound && !isDragging) {\n      interval = setInterval(() => {\n        sound.getCurrentTime((seconds) => {\n          if (typeof seconds === 'number' && !isNaN(seconds)) {\n            setCurrentTime(seconds);\n            if (progressWidth.current > 0 && duration > 0) {\n              const progress = (seconds / duration) * progressWidth.current;\n              if (!isNaN(progress)) {\n                knobPosition.value = withSpring(progress, {\n                  damping: 15,\n                  stiffness: 100,\n                });\n              }\n            }\n          }\n        });\n      }, 100);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isPlaying, sound, isDragging, duration]);\n\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderGrant: (evt) => {\n      setIsDragging(true);\n      startX.current = evt.nativeEvent.pageX - knobPosition.value;\n    },\n    onPanResponderMove: (evt) => {\n      if (progressWidth.current > 0) {\n        const newPosition = evt.nativeEvent.pageX - startX.current;\n        const boundedPosition = Math.max(\n          0,\n          Math.min(newPosition, progressWidth.current)\n        );\n        knobPosition.value = boundedPosition;\n\n        const percentage = boundedPosition / progressWidth.current;\n        const newTime = percentage * duration;\n        if (!isNaN(newTime)) {\n          setCurrentTime(newTime);\n        }\n      }\n    },\n    onPanResponderRelease: () => {\n      setIsDragging(false);\n      if (sound && progressWidth.current > 0) {\n        const percentage = knobPosition.value / progressWidth.current;\n        const newTime = percentage * duration;\n        if (!isNaN(newTime)) {\n          sound.setCurrentTime(newTime);\n        }\n      }\n    },\n    onPanResponderTerminate: () => {\n      setIsDragging(false);\n    },\n  });\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateX: knobPosition.value }],\n    };\n  });\n\n  const togglePlay = () => {\n    if (!sound) return;\n\n    if (isPlaying) {\n      sound.pause(() => {\n        setIsPlaying(false);\n        setCurrentlyPlayingId(null);\n      });\n    } else {\n      setCurrentlyPlayingId(audioId);\n      sound.play((success) => {\n        if (success) {\n          setIsPlaying(false);\n          setCurrentTime(0);\n          knobPosition.value = withSpring(0);\n          setCurrentlyPlayingId(null);\n        }\n      });\n      setIsPlaying(true);\n    }\n  };\n\n  // Stop audio when video starts playing\n  useEffect(() => {\n    if (isVideoPlaying && isPlaying && sound) {\n      sound.pause(() => {\n        setIsPlaying(false);\n        setCurrentlyPlayingId(null);\n      });\n    }\n  }, [isVideoPlaying]);\n\n  return (\n    <View style={tw`rounded-lg w-56`}>\n      <View style={tw`flex-row items-center gap-2 px-2 pt-2`}>\n        <Pressable\n          onPress={togglePlay}\n          style={[\n            tw`bg-black/40 rounded-full p-2`,\n            theme?.messageStyle?.audioPlayButtonStyle,\n          ]}\n        >\n          {isPlaying ? (\n            CustomPauseIcon ? (\n              <CustomPauseIcon />\n            ) : (\n              <PauseIcon\n                style={tw.style('h-6 w-6')}\n                color={theme?.colors?.audioPauseIconColor || 'white'}\n              />\n            )\n          ) : CustomPlayIcon ? (\n            <CustomPlayIcon />\n          ) : (\n            <PlayIcon\n              style={tw.style('h-6 w-6')}\n              color={theme?.colors?.audioPlayIconColor || 'white'}\n            />\n          )}\n        </Pressable>\n\n        <View\n          ref={progressRef}\n          onLayout={(e) => {\n            const { width } = e.nativeEvent.layout;\n            progressWidth.current = width;\n          progressRef.current?.measure((_, __, ___, ____, pageX) => {\n            progressX.current = pageX;\n          });\n          }}\n          style={[\n            tw`relative h-1 bg-zinc-400 rounded overflow-visible w-[75%]`,\n            theme?.messageStyle?.progressBarStyle,\n          ]}\n        >\n          <View\n            style={[\n              tw`absolute h-full bg-slate-200`,\n              {\n                width: `${duration > 0 ? (currentTime / duration) * 100 : 0}%`,\n              },\n              theme?.messageStyle?.activeProgressBarStyle,\n            ]}\n          />\n          <Animated.View\n            {...panResponder.panHandlers}\n            style={[\n              animatedStyle,\n              {\n                position: 'absolute',\n                top: -6,\n                width: 16,\n                height: 16,\n                borderRadius: 8,\n                backgroundColor: 'white',\n                shadowColor: '#000',\n                shadowOffset: { width: 0, height: 2 },\n                shadowOpacity: 0.25,\n                shadowRadius: 3.84,\n                elevation: 5,\n              },\n              { ...theme?.messageStyle?.audioKnobStyle },\n            ]}\n          />\n        </View>\n      </View>\n      <View style={tw`px-4 py-1`}>\n        <Text\n          style={[\n            tw`text-xs text-gray-500`,\n            theme?.messageStyle?.audioDurationStyle,\n          ]}\n        >\n          {!isNaN(currentTime) ? formatDuration(currentTime) : '0:00'}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nexport default React.memo(AudioPlayer);\n"],"names":["_worklet_1935336866997_init_data","code","location","sourceMap","version","AudioPlayer","audioUrl","audioId","isVideoPlaying","theme","CustomPlayIcon","CustomPauseIcon","useChatContext","currentlyPlayingId","setCurrentlyPlayingId","useAudio","sound","setSound","useState","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","isDragging","setIsDragging","progressRef","useRef","progressWidth","progressX","startX","knobPosition","useSharedValue","useEffect","mounted","newSound","Sound","error","getDuration","pause","release","value","interval","setInterval","getCurrentTime","seconds","isNaN","current","progress","withSpring","damping","stiffness","clearInterval","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderGrant","evt","nativeEvent","pageX","onPanResponderMove","newPosition","boundedPosition","Math","max","min","newTime","onPanResponderRelease","onPanResponderTerminate","animatedStyle","useAnimatedStyle","_e","global","Error","AudioPlayerTsx1","transform","translateX","__closure","__workletHash","__initData","__stackDetails","_jsxs","View","style","tw","children","_jsx","Pressable","onPress","togglePlay","play","success","messageStyle","audioPlayButtonStyle","PauseIcon","color","colors","audioPauseIconColor","PlayIcon","audioPlayIconColor","ref","onLayout","e","width","layout","measure","_","__","___","____","progressBarStyle","activeProgressBarStyle","Animated","panHandlers","position","top","height","borderRadius","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","audioKnobStyle","Text","audioDurationStyle","formatDuration","AudioPlayer$1","React","memo"],"mappings":"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"}