{"version":3,"file":"MediaViewer.js","sources":["../../../../src/components/MediaViewer/MediaViewer.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Modal, Pressable, Text, View } from 'react-native';\nimport ImageViewer from 'react-native-image-zoom-viewer';\nimport Video, { VideoRef } from 'react-native-video';\nimport tw from 'twrnc';\nimport { LoadingIcon } from '../../assets/Icons/LoadingIcon';\nimport { XIcon } from '../../assets/Icons/XIcon';\nimport { MediaViewerProps } from './types';\n\nconst MediaViewer: React.FC<MediaViewerProps> = ({\n  imageUrl,\n  videoUrl,\n  onClose,\n}) => {\n  const videoRef = useRef<VideoRef>(null);\n  const [videoIsLoading, setVideoIsLoading] = useState(false);\n  const [videoHasError, setVideoHasError] = useState(false);\n\n  if (!imageUrl && !videoUrl) return null;\n\n  return (\n    <Modal visible={!!imageUrl || !!videoUrl} transparent={true}>\n      <View\n        style={tw`top-0 bottom-0 left-0 right-0 bg-black/80 flex-1 absolute`}\n      >\n        <Pressable\n          onPress={onClose}\n          style={tw`absolute right-4 top-4 p-2 rounded-full bg-slate-100/70 z-10`}\n        >\n          <XIcon style={tw`h-8 w-8`} />\n        </Pressable>\n\n        {imageUrl && (\n          <ImageViewer\n            imageUrls={[{ url: imageUrl }]}\n            enableSwipeDown\n            onSwipeDown={onClose}\n            backgroundColor=\"rgba(0,0,0,0.8)\"\n            enableImageZoom\n            onSave={() => imageUrl}\n            renderIndicator={() => <></>}\n          />\n        )}\n\n        {videoUrl && (\n          <View style={tw`justify-center items-center`}>\n            <Video\n              source={{ uri: videoUrl }}\n              ref={videoRef}\n              shutterColor=\"transparent\"\n              controls={true}\n              style={{\n                width: '100%',\n                height: '100%',\n                borderRadius: 8,\n                position: 'relative',\n                marginHorizontal: 48,\n              }}\n              controlsStyles={{\n                hideSettingButton: false,\n                hideNext: true,\n                hidePrevious: true,\n              }}\n              resizeMode=\"contain\"\n              onLoadStart={() => {\n                setVideoIsLoading(true);\n                setVideoHasError(false);\n              }}\n              onLoad={() => setVideoIsLoading(false)}\n              onBuffer={({ isBuffering }) => setVideoIsLoading(isBuffering)}\n              onError={() => {\n                setVideoHasError(true);\n                setVideoIsLoading(false);\n              }}\n            />\n            {videoIsLoading && (\n              <View\n                style={tw`absolute inset-0 flex items-center justify-center bg-black/40 rounded-full`}\n              >\n                <LoadingIcon style={tw.style('h-12 w-12')} spinning />\n              </View>\n            )}\n            {videoHasError && (\n              <View\n                style={tw`absolute inset-0 flex items-center justify-center bg-red-500/60 p-2`}\n              >\n                <Text style={tw`text-white font-bold`}>\n                  Failed to load video\n                </Text>\n              </View>\n            )}\n          </View>\n        )}\n      </View>\n    </Modal>\n  );\n};\n\nexport default React.memo(MediaViewer);\n"],"names":["MediaViewer","imageUrl","videoUrl","onClose","videoRef","useRef","videoIsLoading","setVideoIsLoading","useState","videoHasError","setVideoHasError","_jsx","Modal","visible","transparent","children","_jsxs","View","style","tw","Pressable","onPress","XIcon","ImageViewer","imageUrls","url","enableSwipeDown","onSwipeDown","backgroundColor","enableImageZoom","onSave","renderIndicator","_Fragment","Video","source","uri","ref","shutterColor","controls","width","height","borderRadius","position","marginHorizontal","controlsStyles","hideSettingButton","hideNext","hidePrevious","resizeMode","onLoadStart","onLoad","onBuffer","isBuffering","onError","LoadingIcon","spinning","Text","MediaViewer$1","React","memo"],"mappings":"iZASA,MAAMA,EAA0CA,EAC9CC,WACAC,WACAC,cAEA,MAAMC,EAAWC,EAAiB,OAC3BC,EAAgBC,GAAqBC,GAAS,IAC9CC,EAAeC,GAAoBF,GAAS,GAEnD,OAAKP,GAAaC,EAGhBS,EAACC,EAAK,CAACC,UAAWZ,KAAcC,EAAUY,aAAa,EAAKC,SAC1DC,EAACC,EAAI,CACHC,MAAOC,CAAE,4DAA4DJ,SAAA,CAErEJ,EAACS,EAAS,CACRC,QAASlB,EACTe,MAAOC,CAAE,+DAA+DJ,SAExEJ,EAACW,EAAK,CAACJ,MAAOC,CAAE,cAGjBlB,GACCU,EAACY,EAAW,CACVC,UAAW,CAAC,CAAEC,IAAKxB,IACnByB,iBAAe,EACfC,YAAaxB,EACbyB,gBAAgB,kBAChBC,iBAAe,EACfC,OAAQA,IAAM7B,EACd8B,gBAAiBA,IAAMpB,EAAAqB,EAAI,CAAA,KAI9B9B,GACCc,EAACC,EAAI,CAACC,MAAOC,CAAE,8BAA8BJ,SAAA,CAC3CJ,EAACsB,EAAK,CACJC,OAAQ,CAAEC,IAAKjC,GACfkC,IAAKhC,EACLiC,aAAa,cACbC,UAAU,EACVpB,MAAO,CACLqB,MAAO,OACPC,OAAQ,OACRC,aAAc,EACdC,SAAU,WACVC,iBAAkB,IAEpBC,eAAgB,CACdC,mBAAmB,EACnBC,UAAU,EACVC,cAAc,GAEhBC,WAAW,UACXC,YAAaA,KACX1C,GAAkB,GAClBG,GAAiB,EAAM,EAEzBwC,OAAQA,IAAM3C,GAAkB,GAChC4C,SAAUA,EAAGC,iBAAkB7C,EAAkB6C,GACjDC,QAASA,KACP3C,GAAiB,GACjBH,GAAkB,EAAM,IAG3BD,GACCK,EAACM,EAAI,CACHC,MAAOC,CAAE,6EAA6EJ,SAEtFJ,EAAC2C,EAAW,CAACpC,MAAOC,EAAGD,MAAM,aAAcqC,UAAQ,MAGtD9C,GACCE,EAACM,EAAI,CACHC,MAAOC,CAAE,sEAAsEJ,SAE/EJ,EAAC6C,EAAI,CAACtC,MAAOC,CAAE,uBAAuBJ,SAAC,mCApElB,IA4EzB,EAIZ,IAAA0C,EAAeC,EAAMC,KAAK3D"}