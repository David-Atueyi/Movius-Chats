{"version":3,"file":"TypingIndicator.js","sources":["../../../../src/components/TypingComponent/TypingIndicator.tsx"],"sourcesContent":["import { Image, Text, View } from 'react-native';\nimport tw from 'twrnc';\nimport { ArrowBack2RoundedIcon } from '../../assets/Icons/ArrowBack2RoundedIcon';\nimport { useChatContext } from '../../context/ChatContext';\n\nexport interface TypingUser {\n  id: string;\n  avatar: string;\n  name: string;\n}\n\ninterface TypingIndicatorProps {\n  typingUsers: TypingUser[];\n  currentUserId: string;\n}\n\nexport const TypingIndicator = ({\n  typingUsers,\n  currentUserId,\n}: TypingIndicatorProps) => {\n  const { theme, showAvatars, renderCustomTyping, showBubbleTail } =\n    useChatContext();\n\n  const otherTypingUsers = typingUsers.filter(\n    (user) => user.id !== currentUserId\n  );\n\n  if (!otherTypingUsers.length) return null;\n\n  const displayedUsers = otherTypingUsers.slice(0, 2);\n  const additionalUsers = otherTypingUsers.length - 2;\n\n  return (\n    <View style={tw`my-1 max-w-[75%] self-start flex-row`}>\n      {showAvatars && (\n        <View style={tw`flex-row`}>\n          {displayedUsers.map((user, index) => (\n            <View\n              key={user.id}\n              style={[\n                tw`bg-gray-400 w-6 h-6 rounded-full items-center`,\n                {\n                  marginLeft: index > 0 ? -10 : 0,\n                  zIndex: displayedUsers.length + index,\n                },\n              ]}\n            >\n              {user.avatar ? (\n                <Image\n                  source={{ uri: user.avatar }}\n                  style={[\n                    tw`w-full h-full object-cover rounded-full`,\n                    theme?.bubbleStyle?.avatarImageStyle,\n                  ]}\n                />\n              ) : (\n                <Text\n                  style={[\n                    tw`text-sm text-black font-semibold capitalize rounded-full bg-zinc-300 w-full h-full text-center pt-0.5`,\n                    theme?.bubbleStyle?.avatarTextStyle,\n                  ]}\n                >\n                  {user.name?.charAt(0)}\n                </Text>\n              )}\n            </View>\n          ))}\n          {additionalUsers > 0 && (\n            <View\n              style={[\n                tw`bg-gray-400 w-6 h-6 rounded-full items-center justify-center`,\n                {\n                  marginLeft: -10,\n                  zIndex: 3,\n                },\n                { ...theme?.bubbleStyle?.additionalTypingUsersContainerStyle },\n              ]}\n            >\n              <Text\n                style={[\n                  tw`text-white text-xs font-semibold`,\n                  theme?.bubbleStyle?.additionalTypingUsersTextStyle,\n                ]}\n              >\n                +{additionalUsers}\n              </Text>\n            </View>\n          )}\n        </View>\n      )}\n      {showBubbleTail && (\n        <ArrowBack2RoundedIcon\n          style={tw.style(\n            'w-6 h-6 fill-white mt-[1.25px] stroke-transparent', \n            {\n              transform: [{ rotate: '180deg' }, { translateX: 6 }],\n            }\n          )}\n          color={`${theme?.colors?.receivedMessageTailColor || 'white'}`}\n        />\n      )}\n\n      <View\n        style={[\n          tw`px-2 my-1 bg-white rounded-tl-none rounded-lg`,\n          theme?.bubbleStyle?.typingContainerStyle,\n        ]}\n      >\n        {renderCustomTyping ? (\n          renderCustomTyping()\n        ) : (\n          <View style={tw`flex-row items-center py-3 px-2 justify-center`}>\n            <Text style={tw`text-gray-600`}>Typing...</Text>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n};\n"],"names":["TypingIndicator","typingUsers","currentUserId","theme","showAvatars","renderCustomTyping","showBubbleTail","useChatContext","otherTypingUsers","filter","user","id","length","displayedUsers","slice","additionalUsers","_jsxs","View","style","tw","children","jsxs","map","index","_jsx","jsx","marginLeft","zIndex","avatar","Image","source","uri","bubbleStyle","avatarImageStyle","Text","avatarTextStyle","name","charAt","additionalTypingUsersContainerStyle","additionalTypingUsersTextStyle","ArrowBack2RoundedIcon","transform","rotate","translateX","color","colors","receivedMessageTailColor","typingContainerStyle"],"mappings":"wNAgB+BA,EAC7BC,cACAC,oBAEA,MAAMC,MAAEA,EAAKC,YAAEA,EAAWC,mBAAEA,EAAkBC,eAAEA,GAC9CC,mBAEIC,EAAmBP,EAAYQ,QAClCC,GAASA,EAAKC,KAAOT,IAGxB,IAAKM,EAAiBI,OAAQ,OAAO,KAErC,MAAMC,EAAiBL,EAAiBM,MAAM,EAAG,GAC3CC,EAAkBP,EAAiBI,OAAS,EAElD,OACEI,EAAAA,KAACC,EAAAA,KAAI,CAACC,MAAOC,CAAE,uCAAuCC,SACnDhB,CAAAA,GACCY,EAAAK,KAACJ,OAAI,CAACC,MAAOC,CAAE,WAAWC,SACvBP,CAAAA,EAAeS,KAAI,CAACZ,EAAMa,IACzBC,EAAAC,IAACR,OAAI,CAEHC,MAAO,CACLC,CAAE,gDACF,CACEO,WAAYH,EAAQ,GAAI,GAAM,EAC9BI,OAAQd,EAAeD,OAASW,IAElCH,SAEDV,EAAKkB,OACJJ,EAAAA,IAACK,EAAAA,MAAK,CACJC,OAAQ,CAAEC,IAAKrB,EAAKkB,QACpBV,MAAO,CACLC,CAAE,0CACFhB,GAAO6B,aAAaC,oBAIxBT,EAAAC,IAACS,OAAI,CACHhB,MAAO,CACLC,CAAE,wGACFhB,GAAO6B,aAAaG,iBACpBf,SAEDV,EAAK0B,MAAMC,OAAO,MAxBlB3B,EAAKC,MA6BbI,EAAkB,GACjBS,EAAAC,IAACR,OAAI,CACHC,MAAO,CACLC,CAAE,+DACF,CACEO,YAAe,GACfC,OAAQ,GAEV,IAAKxB,GAAO6B,aAAaM,sCACzBlB,SAEFJ,EAAAK,KAACa,OAAI,CACHhB,MAAO,CACLC,CAAE,mCACFhB,GAAO6B,aAAaO,gCACpBnB,SAAA,CACH,IACGL,UAMXT,GACCkB,EAAAC,IAACe,wBAAqB,CACpBtB,MAAOC,EAAGD,MACR,oDACA,CACEuB,UAAW,CAAC,CAAEC,OAAQ,UAAY,CAAEC,WAAY,MAGpDC,MAAO,GAAGzC,GAAO0C,QAAQC,0BAA4B,YAIzDtB,EAAAC,IAACR,OAAI,CACHC,MAAO,CACLC,CAAE,gDACFhB,GAAO6B,aAAae,sBACpB3B,SAEDf,EACCA,IAEAmB,EAAAA,IAACP,EAAAA,KAAI,CAACC,MAAOC,CAAE,iDAAiDC,SAC9DI,EAAAC,IAACS,OAAI,CAAChB,MAAOC,CAAE,gBAAgBC,SAAC,oBAIjC"}